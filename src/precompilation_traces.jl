precompile(Tuple{typeof(Base.first), Array{Any, 1}})
precompile(Tuple{typeof(Base.get_bool_env), String, Bool})
precompile(Tuple{Type{NamedTuple{(:source,), T} where T<:Tuple}, Tuple{Symbol}})
precompile(Tuple{typeof(Main.test), Array{String, 1}})
precompile(Tuple{typeof(Base.CoreLogging.shouldlog), Base.CoreLogging.ConsoleLogger, Base.CoreLogging.LogLevel, Module, Symbol, Symbol})
precompile(Tuple{typeof(Base.CoreLogging.handle_message), Base.CoreLogging.ConsoleLogger, Base.CoreLogging.LogLevel, Vararg{Any, 6}})
precompile(Tuple{typeof(Base.isopen), Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}})
precompile(Tuple{typeof(Base.CoreLogging.default_metafmt), Base.CoreLogging.LogLevel, Vararg{Any, 5}})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}, Base.TTY})
precompile(Tuple{typeof(Base.write), Base.TTY, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, Expr}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, Expr}, Int64, Int64})
precompile(Tuple{typeof(Base.gensym), String})
precompile(Tuple{typeof(Base.:(==)), Symbol, Symbol})
precompile(Tuple{typeof(Test._check_testset), Type, Expr})
precompile(Tuple{typeof(Base.copy), Random.TaskLocalRNG})
precompile(Tuple{typeof(Random.get_tls_seed)})
precompile(Tuple{typeof(Base.copy), Random.Xoshiro})
precompile(Tuple{typeof(Base.copy!), Random.TaskLocalRNG, Random.Xoshiro})
precompile(Tuple{typeof(var"##spawn.jl#230".include), String})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Union{}, 1}, Symbol}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Union{}, 1}, Symbol}, Int64, Int64})
precompile(Tuple{typeof(Base.length), Array{Union{}, 1}})
precompile(Tuple{typeof(Base.first), String})
precompile(Tuple{typeof(Base.:(!=)), Char, Char})
precompile(Tuple{Type{NamedTuple{(:start_threadid,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{CooperativeTasks.var"##SingleExecution#31", Bool, Type{CooperativeTasks.SingleExecution}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:start_threadid,), Tuple{Int64}}, Type{CooperativeTasks.SpawnOptions}})
precompile(Tuple{typeof(Base.:(>>)), Int64, UInt8})
precompile(Tuple{typeof(Base._tablesz), Int64})
precompile(Tuple{typeof(Core.memoryref), GenericMemory{:not_atomic, CooperativeTasks.Message{T} where T, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{typeof(Core.memoryref), GenericMemory{:not_atomic, CooperativeTasks.TaskState, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{typeof(CooperativeTasks.spawn), Function, CooperativeTasks.SpawnOptions})
precompile(Tuple{typeof(Base.current_exceptions)})
precompile(Tuple{Type{Test.Threw}, Any, Any, Any})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, Array{Any, 1}}}, Base.ExceptionStack})
precompile(Tuple{typeof(Base.sprint), Function, ErrorException})
precompile(Tuple{typeof(Base.showerror), Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}, ErrorException})
precompile(Tuple{typeof(Test.contains_warn), Any, Base.Regex})
precompile(Tuple{typeof(Base.occursin), Base.Regex, String})
precompile(Tuple{typeof(Base.sprint), Function, ArgumentError})
precompile(Tuple{typeof(Base.showerror), Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}, ArgumentError})
precompile(Tuple{typeof(Test.contains_warn), Any, AbstractString})
precompile(Tuple{CooperativeTasks.var"#_#8#9", Nothing, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Type{CooperativeTasks.Command}, Function})
precompile(Tuple{Type{NamedTuple{(:critical,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{Type{CooperativeTasks.TaskException}, CooperativeTasks.StatusCode})
precompile(Tuple{Type{CooperativeTasks.TaskException}, String, CooperativeTasks.StatusCode})
precompile(Tuple{typeof(Base.convert), Type{ResultTypes.Result{CooperativeTasks.Message{T} where T, CooperativeTasks.TaskException}}, CooperativeTasks.TaskException})
precompile(Tuple{Type{ResultTypes.Result{CooperativeTasks.Message{T} where T, CooperativeTasks.TaskException}}, Nothing, CooperativeTasks.TaskException})
precompile(Tuple{typeof(Base.:(&)), Int64, Int64})
precompile(Tuple{typeof(Base.getproperty), Base.Generator{Tuple{}, typeof(Base.identity)}, Symbol})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Tuple{}, typeof(Base.identity)}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Tuple{}, typeof(Base.identity)}, Int64, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.BottomRF{Base.var"#70#71"{typeof(Base.empty!)}}, Tuple{}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.BottomRF{Base.var"#70#71"{typeof(Base.empty!)}}, Tuple{}}, Int64, Int64})
precompile(Tuple{typeof(CooperativeTasks.reset)})
precompile(Tuple{typeof(Base.get!), Type{Array{Task, 1}}, Base.IdDict{Any, Any}, Any})
precompile(Tuple{typeof(Base.get!), Type{Array{CooperativeTasks.Message{T} where T, 1}}, Base.IdDict{Any, Any}, Any})
precompile(Tuple{typeof(Base.ismissing), Nothing})
precompile(Tuple{CooperativeTasks.var"#24#25"{Array{CooperativeTasks.Condition, 1}}})
precompile(Tuple{typeof(Base.setproperty!), CooperativeTasks.Condition, Symbol, Bool})
precompile(Tuple{typeof(Base.get!), Type{Dictionaries.Dictionary{Base.UUID, CooperativeTasks.Message{T} where T}}, Base.IdDict{Any, Any}, Any})
precompile(Tuple{typeof(Base.get!), Type{Dictionaries.Dictionary{Task, CooperativeTasks.TaskState}}, Base.IdDict{Any, Any}, Any})
precompile(Tuple{typeof(Base.get!), Type{Dictionaries.Dictionary{Task, Any}}, Base.IdDict{Any, Any}, Any})
precompile(Tuple{typeof(Base.get!), Type{Dictionaries.Dictionary{Base.UUID, Any}}, Base.IdDict{Any, Any}, Any})
precompile(Tuple{typeof(CooperativeTasks.execution_mode), Symbol})
precompile(Tuple{Type{NamedTuple{(:execution_mode,), T} where T<:Tuple}, Tuple{CooperativeTasks.SingleExecution}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:execution_mode,), Tuple{CooperativeTasks.SingleExecution}}, Type{CooperativeTasks.SpawnOptions}})
precompile(Tuple{typeof(Base.iszero), Float64})
precompile(Tuple{CooperativeTasks.var"#_exec#32"{var"##spawn.jl#230".var"#9#14"}})
precompile(Tuple{typeof(Base.istaskstarted), Task})
precompile(Tuple{Type{Test.Returned}, Any, Any, LineNumberNode})
precompile(Tuple{typeof(Base.istaskdone), Task})
precompile(Tuple{typeof(CooperativeTasks.owned_tasks)})
precompile(Tuple{typeof(Base.in), Task, Array{Task, 1}})
precompile(Tuple{typeof(var"##spawn.jl#230".task_owner), Task})
precompile(Tuple{typeof(Base.:(==)), Task, Task})
precompile(Tuple{typeof(CooperativeTasks.trysend), Task, CooperativeTasks.Message{T} where T})
precompile(Tuple{typeof(Base.put!), Base.Channel{CooperativeTasks.Message{T} where T}, CooperativeTasks.Message{CooperativeTasks.Command}})
precompile(Tuple{typeof(Base.convert), Type{ResultTypes.Result{CooperativeTasks.Message{T} where T, CooperativeTasks.TaskException}}, CooperativeTasks.Message{CooperativeTasks.Command}})
precompile(Tuple{typeof(ResultTypes.unwrap), ResultTypes.Result{CooperativeTasks.Message{T} where T, CooperativeTasks.TaskException}})
precompile(Tuple{typeof(CooperativeTasks.process_message), CooperativeTasks.Message{CooperativeTasks.Command}})
precompile(Tuple{typeof(CooperativeTasks.set_task_state), Task, CooperativeTasks.TaskState})
precompile(Tuple{typeof(Base.convert), Type{ResultTypes.Result{Any, Union{CooperativeTasks.ExecutionError, CooperativeTasks.TaskException}}}, Any})
precompile(Tuple{typeof(CooperativeTasks.handle_error), CooperativeTasks.PropagatedTaskException})
precompile(Tuple{typeof(CooperativeTasks.istasksuccessful), Task})
precompile(Tuple{CooperativeTasks.var"#_exec#32"{var"##spawn.jl#230".var"#10#15"}})
precompile(Tuple{typeof(Base.Threads.nthreads)})
precompile(Tuple{Type{CooperativeTasks.LoopExecution}, Float64})
precompile(Tuple{Type{NamedTuple{(:start_threadid, :allow_task_migration, :execution_mode), T} where T<:Tuple}, Tuple{Int64, Bool, CooperativeTasks.LoopExecution}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:start_threadid, :allow_task_migration, :execution_mode), Tuple{Int64, Bool, CooperativeTasks.LoopExecution}}, Type{CooperativeTasks.SpawnOptions}})
precompile(Tuple{CooperativeTasks.var"#_exec#34"{CooperativeTasks.LoopExecution, var"##spawn.jl#230".var"#11#16"}})
precompile(Tuple{typeof(Base.push!), Array{Int64, 1}, Int64})
precompile(Tuple{CooperativeTasks.var"#13#14", CooperativeTasks.Future})
precompile(Tuple{typeof(Base.wait), CooperativeTasks.Condition})
precompile(Tuple{typeof(Base.invokelatest), Any})
precompile(Tuple{CooperativeTasks.var"#6#7"{Task}})
precompile(Tuple{typeof(CooperativeTasks.schedule_shutdown)})
precompile(Tuple{typeof(Base.put!), Base.Channel{CooperativeTasks.Message{T} where T}, CooperativeTasks.Message{CooperativeTasks.ReturnedValue}})
precompile(Tuple{typeof(Base.convert), Type{ResultTypes.Result{CooperativeTasks.Message{T} where T, CooperativeTasks.TaskException}}, CooperativeTasks.Message{CooperativeTasks.ReturnedValue}})
precompile(Tuple{typeof(Base.:(==)), Int64})
precompile(Tuple{typeof(Base.all), Function, Array{Int64, 1}})
precompile(Tuple{typeof(Base._all), Base.Fix2{typeof(Base.:(==)), Int64}, Array{Int64, 1}, Base.Colon})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, var"##spawn.jl#230".var"#12#17", Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, var"##spawn.jl#230".var"#12#17"}})
precompile(Tuple{CooperativeTasks.var"#_exec#34"{CooperativeTasks.LoopExecution, var"##spawn.jl#230".var"#13#18"{Int64}}})
precompile(Tuple{typeof(Base.getindex), Array{Array{Int64, 1}, 1}, Int64})
precompile(Tuple{typeof(Base.all), Function, Array{Array{Int64, 1}, 1}})
precompile(Tuple{typeof(Base._all), typeof(Base.allequal), Array{Array{Int64, 1}, 1}, Base.Colon})
precompile(Tuple{typeof(Base.copy!), Random.Xoshiro, Random.Xoshiro})
precompile(Tuple{typeof(Test.finish), Test.DefaultTestSet})
precompile(Tuple{Type{NamedTuple{(:value, :time, :bytes, :gctime, :gcstats, :lock_conflicts, :compile_time, :recompile_time), T} where T<:Tuple}, Tuple{Nothing, Float64, Int64, Float64, Base.GC_Diff, Int64, Float64, Float64}})
precompile(Tuple{typeof(Base.getproperty), NamedTuple{(:value, :time, :bytes, :gctime, :gcstats, :lock_conflicts, :compile_time, :recompile_time), Tuple{Nothing, Float64, Int64, Float64, Base.GC_Diff, Int64, Float64, Float64}}, Symbol})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:msg,), Tuple{Nothing}}, typeof(Base.time_print), Base.TTY, Float64, Int64, Int64, Int64, Int64, Float64, Float64, Bool})
precompile(Tuple{typeof(var"##execution.jl#231".include), String})
precompile(Tuple{CooperativeTasks.var"#_exec#32"{var"##execution.jl#231".var"#9#13"}})
precompile(Tuple{Type{CooperativeTasks.LoopExecution}, Nothing})
precompile(Tuple{typeof(CooperativeTasks.execution_mode), CooperativeTasks.LoopExecution})
precompile(Tuple{Type{NamedTuple{(:execution_mode,), T} where T<:Tuple}, Tuple{CooperativeTasks.LoopExecution}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:execution_mode,), Tuple{CooperativeTasks.LoopExecution}}, Type{CooperativeTasks.SpawnOptions}})
precompile(Tuple{CooperativeTasks.var"#_exec#34"{CooperativeTasks.LoopExecution, var"##execution.jl#231".var"#10#14"}})
precompile(Tuple{CooperativeTasks.var"#_exec#34"{CooperativeTasks.LoopExecution, var"##execution.jl#231".var"#11#15"}})
precompile(Tuple{CooperativeTasks.var"#_exec#34"{CooperativeTasks.LoopExecution, var"##execution.jl#231".var"#12#16"}})
precompile(Tuple{typeof(var"##commands.jl#232".include), String})
precompile(Tuple{CooperativeTasks.var"#_exec#34"{CooperativeTasks.LoopExecution, var"##commands.jl#232".var"#9#23"}})
precompile(Tuple{typeof(CooperativeTasks.execute), Function, Task})
precompile(Tuple{Type{NamedTuple{(:timeout,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:timeout,), Tuple{Int64}}, typeof(CooperativeTasks.tryfetch), CooperativeTasks.Future})
precompile(Tuple{CooperativeTasks.var"#21#22"{CooperativeTasks.Future, Dictionaries.Dictionary{Base.UUID, Any}}})
precompile(Tuple{typeof(Base.setindex!), Base.RefValue{Any}, ResultTypes.Result{Any, Union{CooperativeTasks.ExecutionError, CooperativeTasks.TaskException}}})
precompile(Tuple{typeof(ResultTypes.iserror), ResultTypes.Result{Any, Union{CooperativeTasks.ExecutionError, CooperativeTasks.TaskException}}})
precompile(Tuple{typeof(ResultTypes.unwrap), ResultTypes.Result{Any, Union{CooperativeTasks.ExecutionError, CooperativeTasks.TaskException}}})
precompile(Tuple{Type{Base.Fix1{F, T} where T where F}, typeof(Base.:(+)), Int64})
precompile(Tuple{typeof(CooperativeTasks.execute), Function, Task, Vararg{Any}})
precompile(Tuple{CooperativeTasks.var"##execute#12", Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CooperativeTasks.execute), Function, Vararg{Any}})
precompile(Tuple{typeof(CooperativeTasks.tryexecute), Function, Task, Int64})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:timeout,), Tuple{Int64}}, typeof(Base.fetch), CooperativeTasks.Future})
precompile(Tuple{Base.Fix1{typeof(Base.:(+)), Int64}, Int64})
precompile(Tuple{Type{Base.Pairs{Symbol, V, I, A} where A where I where V}, NamedTuple{(:continuation,), Tuple{Nothing}}, Tuple{Symbol}})
precompile(Tuple{Base.var"##s128#279", Vararg{Any, 5}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:continuation,), Tuple{Nothing}}, typeof(CooperativeTasks.execute), Function, Task})
precompile(Tuple{var"##commands.jl#232".var"#11#25"})
precompile(Tuple{typeof(ResultTypes.unwrap_error), ResultTypes.Result{Any, Union{CooperativeTasks.ExecutionError, CooperativeTasks.TaskException}}})
precompile(Tuple{typeof(Base.getproperty), CooperativeTasks.ExecutionError, Symbol})
precompile(Tuple{typeof(Base.:(==)), ErrorException, ErrorException})
precompile(Tuple{typeof(CooperativeTasks.tryexecute), Function, Task})
precompile(Tuple{typeof(ResultTypes.unwrap_error), ResultTypes.Result{CooperativeTasks.Future, CooperativeTasks.TaskException}})
precompile(Tuple{typeof(Base.:(==)), CooperativeTasks.TaskException, CooperativeTasks.TaskException})
precompile(Tuple{CooperativeTasks.var"#_exec#34"{CooperativeTasks.LoopExecution, var"##commands.jl#232".var"#12#27"}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, var"##commands.jl#232".var"#4#8", Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.getproperty), Base.Generator{Base.UnitRange{Int64}, var"##commands.jl#232".var"#4#8"}, Symbol})
precompile(Tuple{typeof(Base._similar_shape), Base.Generator{Base.UnitRange{Int64}, var"##commands.jl#232".var"#4#8"}, Base.HasShape{1}})
precompile(Tuple{typeof(var"##commands.jl#232".capture_stdout), var"##commands.jl#232".var"#13#28"{var"##commands.jl#232".var"#pingpong#26"}})
precompile(Tuple{var"##commands.jl#232".var"#pingpong#26", Int64})
precompile(Tuple{Base.RedirectStdStream, Base.TTY})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{CooperativeTasks.Future, String}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{CooperativeTasks.Future, String}, Int64, Int64})
precompile(Tuple{Type{NamedTuple{(:timeout, :sleep_time), T} where T<:Tuple}, Tuple{Float64, Int64}})
precompile(Tuple{typeof(Base.fetch), CooperativeTasks.Future})
precompile(Tuple{CooperativeTasks.var"#_exec#34"{CooperativeTasks.LoopExecution, var"##commands.jl#232".var"#14#29"}})
precompile(Tuple{typeof(var"##commands.jl#232".capture_stdout), var"##commands.jl#232".var"#15#31"{Task, var"##commands.jl#232".var"#pingpong#26"}})
precompile(Tuple{var"##commands.jl#232".var"#16#32"{Task, var"##commands.jl#232".var"#pingpong#26"}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:continuation,), Tuple{var"##commands.jl#232".var"#pingpong_continuation#30"{Task, var"##commands.jl#232".var"#pingpong#26"}}}, typeof(Base.invokelatest), Any, Any, Vararg{Any}})
precompile(Tuple{Base.var"##invokelatest#2", Base.Pairs{Symbol, var"##commands.jl#232".var"#pingpong_continuation#30"{Task, var"##commands.jl#232".var"#pingpong#26"}, Tuple{Symbol}, NamedTuple{(:continuation,), Tuple{var"##commands.jl#232".var"#pingpong_continuation#30"{Task, var"##commands.jl#232".var"#pingpong#26"}}}}, typeof(Base.invokelatest), Any, Any, Vararg{Any}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:continuation,), Tuple{var"##commands.jl#232".var"#pingpong_continuation#30"{Task, var"##commands.jl#232".var"#pingpong#26"}}}, typeof(CooperativeTasks.execute), Function, Task, Vararg{Any}})
precompile(Tuple{CooperativeTasks.var"##execute#12", Base.Pairs{Symbol, var"##commands.jl#232".var"#pingpong_continuation#30"{Task, var"##commands.jl#232".var"#pingpong#26"}, Tuple{Symbol}, NamedTuple{(:continuation,), Tuple{var"##commands.jl#232".var"#pingpong_continuation#30"{Task, var"##commands.jl#232".var"#pingpong#26"}}}}, typeof(CooperativeTasks.execute), Function, Vararg{Any}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:continuation,), Tuple{var"##commands.jl#232".var"#pingpong_continuation#30"{Task, var"##commands.jl#232".var"#pingpong#26"}}}, typeof(CooperativeTasks.tryexecute), Function, Task, Int64})
precompile(Tuple{var"##commands.jl#232".var"#pingpong_continuation#30"{Task, var"##commands.jl#232".var"#pingpong#26"}, ResultTypes.Result{Any, Union{CooperativeTasks.ExecutionError, CooperativeTasks.TaskException}}})
precompile(Tuple{typeof(Base.iseven), Int64})
precompile(Tuple{CooperativeTasks.var"#_exec#34"{CooperativeTasks.LoopExecution, var"##commands.jl#232".var"#17#33"}})
precompile(Tuple{CooperativeTasks.var"#_exec#32"{var"##commands.jl#232".var"#18#34"}})
precompile(Tuple{typeof(Base.sprint), Function, CooperativeTasks.PropagatedTaskException})
precompile(Tuple{typeof(Base.showerror), Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}, CooperativeTasks.PropagatedTaskException})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}}, Task})
precompile(Tuple{typeof(Base.showerror), Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}, CooperativeTasks.TaskException, Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}})
precompile(Tuple{Type{Base.StackTraces.StackFrame}, Symbol, Symbol, Int64, Nothing, Bool, Bool, UInt64})
precompile(Tuple{Type{Base.StackTraces.StackFrame}, Symbol, Symbol, Int64, Core.MethodInstance, Bool, Bool, UInt64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.StackTraces.StackFrame, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.StackTraces.StackFrame, Int64}, Int64, Int64})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:use_color,), Tuple{Bool}}, typeof(Base.print_type_bicolor), Base.IOContext{Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}}, Type})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:use_color,), Tuple{Bool}}, typeof(Base.print_type_bicolor), Base.IOContext{Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}}, Core.TypeofVararg})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}}, Core.TypeofVararg})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}}, Core.TypeofBottom})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:color, :bold), Tuple{Symbol, Bool}}, typeof(Base.printstyled), Base.IOContext{Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}}, String, Vararg{Any}})
precompile(Tuple{Base.var"##printstyled#1119", Bool, Bool, Bool, Bool, Bool, Bool, Symbol, typeof(Base.printstyled), Base.IOContext{Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}}, String, Vararg{Any}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:bold, :italic, :underline, :blink, :reverse, :hidden), NTuple{6, Bool}}, typeof(Base.with_output_color), Function, Symbol, Base.IOContext{Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}}, String, Vararg{Any}})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}}, String, Type, Vararg{Any}})
precompile(Tuple{CooperativeTasks.var"#_exec#34"{CooperativeTasks.LoopExecution, var"##commands.jl#232".var"#20#36"}})
precompile(Tuple{CooperativeTasks.var"#_exec#32"{var"##commands.jl#232".var"#21#37"}})
precompile(Tuple{var"##commands.jl#232".var"#22#38"})
precompile(Tuple{typeof(var"##monitoring.jl#233".include), String})
precompile(Tuple{Type{Ref{Task}}})
precompile(Tuple{Type{NamedTuple{(:allow_failures,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{CooperativeTasks.var"#_exec#32"{var"##monitoring.jl#233".var"#9#19"{Base.RefValue{Task}, Base.RefValue{Task}}}})
precompile(Tuple{CooperativeTasks.var"#_exec#34"{CooperativeTasks.LoopExecution, var"##monitoring.jl#233".var"#10#20"}})
precompile(Tuple{Type{Base.Fix1{F, T} where T where F}, typeof(Base.showerror), Base.TTY})
precompile(Tuple{CooperativeTasks.var"#_exec#34"{CooperativeTasks.LoopExecution, var"##monitoring.jl#233".var"#11#21"}})
precompile(Tuple{typeof(Base.getindex), Base.RefValue{Task}})
precompile(Tuple{typeof(CooperativeTasks.task_states)})
precompile(Tuple{Type{Pair{A, B} where B where A}, Task, CooperativeTasks.TaskState})
precompile(Tuple{typeof(Base.vect), Pair{Task, CooperativeTasks.TaskState}, Vararg{Pair{Task, CooperativeTasks.TaskState}}})
precompile(Tuple{typeof(Dictionaries.dictionary), Array{Pair{Task, CooperativeTasks.TaskState}, 1}})
precompile(Tuple{typeof(Base.:(==)), Dictionaries.Dictionary{Task, CooperativeTasks.TaskState}, Dictionaries.Dictionary{Task, CooperativeTasks.TaskState}})
precompile(Tuple{typeof(CooperativeTasks.tryexecute), Function, Task, Task, Vararg{Any}})
precompile(Tuple{CooperativeTasks.var"##tryexecute#10", Bool, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CooperativeTasks.tryexecute), Function, Task, Task, Vararg{Any}})
precompile(Tuple{Type{CooperativeTasks.Command}, Function, Task, Vararg{Any}})
precompile(Tuple{CooperativeTasks.var"#_#8#9", Nothing, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Type{CooperativeTasks.Command}, Function, Task, Vararg{Any}})
precompile(Tuple{typeof(Base.:(==)), CooperativeTasks.TaskState, CooperativeTasks.TaskState})
precompile(Tuple{typeof(Base.get_task_tls), Task})
precompile(Tuple{typeof(Base.getindex), Base.IdDict{Any, Any}, Any})
precompile(Tuple{typeof(Base.isempty), Array{Task, 1}})
precompile(Tuple{CooperativeTasks.var"#_exec#32"{var"##monitoring.jl#233".var"#12#22"{Base.RefValue{Task}, Base.RefValue{Task}}}})
precompile(Tuple{CooperativeTasks.var"#_exec#34"{CooperativeTasks.LoopExecution, var"##monitoring.jl#233".var"#14#24"}})
precompile(Tuple{CooperativeTasks.var"#_exec#34"{CooperativeTasks.LoopExecution, var"##monitoring.jl#233".var"#13#23"}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, var"##monitoring.jl#233".var"#4#8", Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.getproperty), Base.Generator{Base.UnitRange{Int64}, var"##monitoring.jl#233".var"#4#8"}, Symbol})
precompile(Tuple{typeof(Base._similar_shape), Base.Generator{Base.UnitRange{Int64}, var"##monitoring.jl#233".var"#4#8"}, Base.HasShape{1}})
precompile(Tuple{typeof(var"##monitoring.jl#233".capture_stdout), var"##monitoring.jl#233".var"#15#25"{Base.RefValue{Task}, Base.RefValue{Task}}})
precompile(Tuple{typeof(Base.getproperty), CooperativeTasks.SpawnOptions, Symbol})
precompile(Tuple{CooperativeTasks.var"#_exec#32"{var"##monitoring.jl#233".var"#16#26"{Base.RefValue{Task}, Base.RefValue{Task}}}})
precompile(Tuple{CooperativeTasks.var"#_exec#32"{var"##monitoring.jl#233".var"#17#27"}})
precompile(Tuple{CooperativeTasks.var"#_exec#34"{CooperativeTasks.LoopExecution, var"##monitoring.jl#233".var"#18#28"}})
precompile(Tuple{Type{Base.Fix1{F, T} where T where F}, typeof(Base.showerror), Base.IOStream})
precompile(Tuple{Base.Fix1{typeof(Base.showerror), Base.IOStream}, CooperativeTasks.PropagatedTaskException})
precompile(Tuple{typeof(Base.showerror), Base.IOStream, ErrorException, Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Task, String}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Task, String}, Int64, Int64})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:bold, :italic, :underline, :blink, :reverse, :hidden, :color), Tuple{Bool, Bool, Bool, Bool, Bool, Bool, Symbol}}, typeof(Base.printstyled), Base.TTY, String, Vararg{String}})
precompile(Tuple{Base.var"##printstyled#1119", Bool, Bool, Bool, Bool, Bool, Bool, Symbol, typeof(Base.printstyled), Base.TTY, String, Vararg{String}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:bold, :italic, :underline, :blink, :reverse, :hidden), NTuple{6, Bool}}, typeof(Base.with_output_color), Function, Symbol, Base.TTY, String, Vararg{String}})
precompile(Tuple{Base.var"##with_output_color#1118", Bool, Bool, Bool, Bool, Bool, Bool, typeof(Base.with_output_color), Function, Symbol, Base.TTY, String, Vararg{String}})
precompile(Tuple{Base.var"##printstyled#1119", Bool, Bool, Bool, Bool, Bool, Bool, Symbol, typeof(Base.printstyled), Base.TTY, String})
precompile(Tuple{typeof(Base.println), Base.TTY})
